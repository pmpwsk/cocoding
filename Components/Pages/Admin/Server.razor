@page "/admin/server"
@using System.Diagnostics
@using System.IO.Compression
@inject AuthService AuthService

@if (AuthService.IsAdmin) {
    <CoCoTitleH>Server verwalten</CoCoTitleH>
    <small>(erfordert <a href="https://uwap.org/wrapper" target="_blank">Wrapper</a> mit AutoRestart=true)</small>
    
    <p class="mt-4 mb-3">Aktuelle Version: @Global.VersionString<br/>Neueste Version: @(LatestVersion??"Unbekannt")</p>
    
    <label class="btn btn-primary" for="update-upload">Update hochladen</label>
    <InputFile id="update-upload" hidden OnChange="UpdateFromZip" />
    
    @if (LatestVersion != null && LatestVersion != Global.VersionString) {
        <button class="btn btn-primary d-block mt-2" @onclick="UpdateFromServer">Update auf neueste Version</button>
    }
    
    @if (UpdateStatus != null) {
        <p class="mt-3 danger">Status: @UpdateStatus</p>
    }
} else {
    <h1 class="text-danger">Kein Zugriff!</h1>
}

@code {
    private const string Location = "https://files.uwap.org/@cocoding/";
    
    private delegate Task<bool> DownloadUpdateDelegate(string destinationFileName);
    
    private string? UpdateStatus = null;

    private string? LatestVersion = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using HttpClient client = new();
            LatestVersion = await client.GetStringAsync(Location + "latest");
        }
        catch (Exception ex)
        {
            LatestVersion = null;
            Console.WriteLine($"Failed to load latest version: {ex.Message}\n{ex.StackTrace}");
        }
    }

    private async Task UpdateFromZip(InputFileChangeEventArgs e)
        => await Update(async destinationFileName =>
        {
            var file = e.File;
            if (!file.Name.EndsWith(".zip"))
                return false;
            
            await file.Download(destinationFileName, long.MaxValue);
            return true;
        });

    private async Task UpdateFromServer()
    {
        if (LatestVersion != null)
            await Update(async destinationFileName =>
                {
                    using HttpClient client = new();
                    File.WriteAllBytes(destinationFileName,
                        await client.GetByteArrayAsync(Location + $"cocoding-{LatestVersion}-linux-arm64_fd.zip"));
                    return true;
                });
    }

    private async Task Update(DownloadUpdateDelegate downloader)
    {
        try
        {
            if (Directory.Exists("../Update"))
                Directory.Delete("../Update", true);
            if (Directory.Exists("../UpdateTemp"))
                Directory.Delete("../UpdateTemp", true);
            string? execName = (Process.GetCurrentProcess().MainModule?.FileName)?.Split('/', '\\')?.Last();
            if (execName == null)
            {
                UpdateStatus = "Ungültig!";
                return;
            }
            UpdateStatus = "Lädt...";
            if (!await downloader.Invoke("../UpdateTemp.zip"))
            {
                UpdateStatus = "Ungültig!";
                return;
            }
            ZipFile.ExtractToDirectory("../UpdateTemp.zip", "../UpdateTemp");
            File.Delete("../UpdateTemp.zip");
            if (File.Exists("../UpdateTemp/" + execName))
            {
                Directory.Move("../UpdateTemp", "../Update");
                //update zip without subfolder
            }
            else
            {
                var folders = Directory.GetDirectories("../UpdateTemp", "*", SearchOption.TopDirectoryOnly);
                var files = Directory.GetFiles("../UpdateTemp", "*", SearchOption.TopDirectoryOnly);
                if (files.Length == 0 && folders.Length == 1 && File.Exists(folders[0] + "/" + execName))
                {
                    Directory.Move(folders[0], "../UpdateTemp2");
                    Directory.Delete("../UpdateTemp", true);
                    Directory.Move("../UpdateTemp2", "../Update");
                    //update zip with subfolder
                }
                else
                {
                    Directory.Delete("../UpdateTemp", true);
                    UpdateStatus = "Ungültig!";
                    return;
                }
            }

            UpdateStatus = "Fertig!";
            await Task.Delay(500);
            new Thread(Global.Stop).Start();
        }
        catch (Exception ex)
        {
            UpdateStatus = "Fehler!";
            Console.WriteLine($"Failed to update: {ex.Message}\n{ex.StackTrace}");
        }
    }
}