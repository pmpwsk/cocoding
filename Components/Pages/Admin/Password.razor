@page "/admin/password"
@inject NavigationManager NavigationManager
@inject AuthService AuthService

@if (AuthService.IsAdmin) {
    @if(User != null) {
        @if (User.Id != AuthService.User.Id) {
            <CoCoTitleH>Passwort setzen</CoCoTitleH>
            <p>@@@User.Username</p>
            
            <form @onsubmit="Continue">
                <div class="form-group mb-3">
                    <label for="password1">Passwort:</label>
                    <input class="form-control" type="password" id="password1" placeholder="Passwort eingeben..." autocomplete="new-password" @bind-value="@Password1">
                </div>
                <div class="form-group mb-3">
                    <label for="password2">Passwort bestätigen:</label>
                    <input class="form-control" type="password" id="password2" placeholder="Passwort erneut eingeben..." autocomplete="new-password" @bind-value="@Password2">
                </div>
                @if(ErrorMessage != null) {
                    <p class="text-danger mt-0 mb-3">@ErrorMessage</p>
                }
                <button class="btn btn-primary mb-3" type="submit" id="button">@ContinueButtonText</button>
            </form>
        } else {
            <h1 class="text-danger">Kein Zugriff!</h1>
        }
    } else if(NotFound) {
        <h1 class="text-danger">Nicht gefunden!</h1>
    }
} else {
    <h1 class="text-danger">Kein Zugriff!</h1>
}

@code {
    private UserEntry? User = null;

    private bool NotFound = false;

    private string ContinueButtonText = "Ändern";
    
    private string? ErrorMessage = null;

    private string Password1 { get; set; } = "";

    private string Password2 { get; set; } = "";

    protected override void OnInitialized() {
        if (NavigationManager.TryGetQuery("id", out var idString) && int.TryParse(idString, out var id))
            User = Database.Transaction(cp => UserTable.GetById(cp, id));

        if (User == null)
            NotFound = true;
    }

    private void Continue()
    {
        if (User == null)
            return;

        ErrorMessage = null;
        ContinueButtonText = "Lädt...";
        new Thread(() => ContinueTask().GetAwaiter().GetResult()).Start();
    }

    private async Task ContinueTask()
    {
        if (User == null)
            return;

        try
        {
            UserManager.SetPassword(User.Id, Password1, Password2);
            NavigationManager.NavigateTo("/admin/users");
        }
        catch (Exception ex)
        {
            ContinueButtonText = "Ändern";
            ErrorMessage = ex.Message;
            await InvokeAsync(StateHasChanged);
        }
    }
 }