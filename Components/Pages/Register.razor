@page "/register"
@inject AuthService AuthService

<CoCoTitleH>Registrieren</CoCoTitleH>

<form @onsubmit="Continue">
    <div class="form-group">
        <label for="username">Nutzername:</label>
        <input class="form-control" type="text" id="username" placeholder="Nutzernamen eingeben..." autocomplete="username" @bind-value="@Username">
    </div>
    <div class="form-group mt-3">
        <label for="password1">Passwort:</label>
        <input class="form-control" type="password" id="password1" placeholder="Passwort eingeben..." autocomplete="new-password" @bind-value="@Password1">
    </div>
    <div class="form-group mt-3">
        <label for="password2">Passwort bestätigen:</label>
        <input class="form-control" type="password" id="password2" placeholder="Passwort erneut eingeben..." autocomplete="new-password" @bind-value="@Password2">
    </div>
    @if(ErrorMessage != null) {
        <p class="text-danger mt-3 mb-0">@ErrorMessage</p>
    }
    <button class="btn btn-primary mt-3" type="submit" id="button">@ContinueButtonText</button>
</form>

@code{
    private string ContinueButtonText = "Registrieren";

    private string? ErrorMessage = null;

    private string Username { get; set; } = "";

    private string Password1 { get; set; } = "";

    private string Password2 { get; set; } = "";

    private void Continue()
    {
        ErrorMessage = null;
        ContinueButtonText = "Lädt...";
        new Thread(() => ContinueTask().GetAwaiter().GetResult()).Start();
    }

    private async Task ContinueTask()
    {
        try
        {
            await AuthService.Register(Username, Password1, Password2, InvokeAsync);
        }
        catch (Exception ex)
        {
            ContinueButtonText = "Registrieren";
            ErrorMessage = ex.Message;
            await InvokeAsync(StateHasChanged);
        }
    }
}
