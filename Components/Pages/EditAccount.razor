@page "/edit-account"
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<CoCoTitleH>Konto bearbeiten</CoCoTitleH>

<div class="mb-3">
    <small>
        Falls Sie Ihr Passwort nicht ändern möchten, lassen Sie die Felder "Neues Passwort" und "Neues Passwort bestätigen" leer.<br/>
        Falls Sie keinen Namen haben möchten, lassen Sie das Feld "Name" leer.
</small>
</div>

<form @onsubmit="Continue">
    <div class="form-group mb-3">
        <label for="username">Nutzername:</label>
        <input class="form-control" type="text" id="username" placeholder="Nutzernamen eingeben..." autocomplete="username" @bind-value="@Username">
    </div>
    <div class="form-group mb-3">
        <label for="name">Name:</label>
        <input class="form-control" type="text" id="name" placeholder="Namen eingeben..." autocomplete="name" @bind-value="@Name">
    </div>
    <div class="form-group mb-3">
        <label for="password1">Neues Passwort:</label>
        <input class="form-control" type="password" id="password1" placeholder="Passwort eingeben..." autocomplete="new-password" @bind-value="@Password1">
    </div>
    <div class="form-group mb-3">
        <label for="password2">Neues Passwort bestätigen:</label>
        <input class="form-control" type="password" id="password2" placeholder="Passwort erneut eingeben..." autocomplete="new-password" @bind-value="@Password2">
    </div>
    <div class="form-group mb-3">
        <label for="current-password">Aktuelles Passwort:</label>
        <input class="form-control" type="password" id="current-password" placeholder="Aktuelles Passwort eingeben..." autocomplete="current-password" @bind-value="@CurrentPassword">
    </div>
    @if(ErrorMessage != null) {
        <p class="text-danger mb-3">@ErrorMessage</p>
    }
    <button class="btn btn-primary mb-3" type="submit" id="button">@ContinueButtonText</button>
</form>

<p>
    Design:
    <select class="form-select inline-select" @bind="SelectedThemeString">
        @foreach (Theme theme in Enum.GetValues(typeof(Theme))) {
            <option value="@theme.ToString()">@theme.ToGerman()</option>
        }
    </select>
    <i class="icon icon-check-lg" style="@(ThemeVerificationShown ? "visibility: visible; opacity: 1;" : "visibility: hidden; opacity: 0; transition: visibility 0s 1s, opacity 1s linear;")"></i>
</p>

@code{
    private string ContinueButtonText = "Ändern";

    private string? ErrorMessage = null;

    private string Username { get; set; } = "";

    private string Name { get; set; } = "";

    private string Password1 { get; set; } = "";

    private string Password2 { get; set; } = "";

    private string CurrentPassword { get; set; } = "";

    private string SelectedThemeString
    {
        get => AuthService.User.Theme.ToString();
        set
        {
            if (!Enum.TryParse(value, out Theme theme) || AuthService.User.Theme == theme)
                return;

            if (Database.Transaction(cp =>
                    UserTable.SetTheme(cp, AuthService.User.Id, theme)))
            {
                AuthService.User.Theme = theme;
                _ = ApplyThemeChange();
            }
        }
    }

    private async Task ApplyThemeChange()
    {
        await AuthService.UpdateTheme();
        ThemeVerificationShown = true;
        StateHasChanged();
        await Task.Delay(3000);
        ThemeVerificationShown = false;
        StateHasChanged();
    }

    private bool ThemeVerificationShown = false;

    protected override void OnInitialized()
    {
        Username = AuthService.User.Username;
        Name = AuthService.User.Name ?? "";
    }

    private void Continue()
    {
        ErrorMessage = null;
        ContinueButtonText = "Lädt...";
        new Thread(() => ContinueTask().GetAwaiter().GetResult()).Start();
    }

    private async Task ContinueTask()
    {
        try
        {
            UserManager.EditUser(AuthService.User, Username, Name, CurrentPassword, Password1, Password2);
            NavigationManager.NavigateTo($"/user?id={AuthService.User.Id}");
        }
        catch (Exception ex)
        {
            ContinueButtonText = "Ändern";
            ErrorMessage = ex.Message;
            await InvokeAsync(StateHasChanged);
        }
    }
}
